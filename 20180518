csc.exe, the compiler of .net framework

We need to add the env into path.
Something like the C:\Windows\Microsoft.NET\Framework\v4.0.30319.

Microsoft Windows [版本 6.1.7601]
版权所有 (c) 2009 Microsoft Corporation。保留所有权利。

C:\Users\xxx>csc.exe
Microsoft (R) Visual C# Compiler version 4.0.30319.17929
for Microsoft (R) .NET Framework 4.5
Copyright (C) Microsoft Corporation. All rights reserved.

warning CS2008: No source files specified
error CS1562: Outputs without source must have the /out option specified

C:\Users\xxx>

using System;
namespace HelloWorldApplication
{
	class HelloWorld
	{
		static void Main(string[] args)
		{
			Console.WriteLine("Hello, Shin");
			Console.ReadKey();
		}
	}
}

When you could see something like:
>
Microsoft (R) Visual C# Compiler version 4.0.30319.17929
for Microsoft (R) .NET Framework 4.5
Copyright (C) Microsoft Corporation. All rights reserved.
>

this means you have succeeded to compile your source file. And if you are lucky enough, you will successfully run the compiled file.

using System;
namespace HelloWorldApplication
{
	class HelloQin
	{
		static void Main(string[] args)
		{
			Console.WriteLine("Hello, Shin");
			Console.ReadKey();
			Console.WriteLine("Please enter the needed number you want");
			Console.ReadKey();
			if(true)
			{
				Console.WriteLine("Now you see how to use if ");
			}
			Console.ReadKey();
			if(!false)
			{
				Console.WriteLine("Now you see how to use false and the !");
			}
			Console.ReadKey();
			for(int a = 1; a < 100; a ++)
			{
				Console.WriteLine(a);
			}
			Console.ReadKey();
			Console.WriteLine("Oh, good, now you can see how to use the for loop in c sharp");
			for(double b = 2; b < 3; b+=0.01)
			{
				Console.WriteLine(b);
			}
			string obj = Console.ReadLine();
			Console.WriteLine(obj);
			Console.ReadKey();
		}
	}
}

C sharp is key word and property usage:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
	class Program
	{
		static void Main(string[] args)
		{
			Qin qin = new Qin();
			qin.A = 22;
			Console.WriteLine(qin.A);
			Console.ReadKey();
			Qin qin2 = qin;
			Console.WriteLine(qin2.A);
			Console.ReadKey();
			qin2.A = 33;
			Console.WriteLine(qin2.A);
			Console.ReadKey();
			QinIFImpl qinIFImpl = new QinIFImpl();
			Console.WriteLine(qinIFImpl is QinIF);
			Console.ReadKey(); 
			QinClassExtension classExtension = new QinClassExtension();
			Console.WriteLine(classExtension is QinIF);
			Console.ReadKey();
		}
	}

	interface QinIF
	{
	}

	class QinIFImpl : QinIF
	{

	}

	class QinClassExtension : QinIFImpl
	{
	}

	struct Qin
	{
		private int a;
		public int A
		{
			get
			{
				return this.a;
			}
			set
			{
				a = value;
			}
		}
	}
}
